{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","venues","markers","hamburgerActive","renderMap","source","index","window","document","getElementsByTagName","script","createElement","src","async","defer","parentNode","insertBefore","error","console","log","alert","loadScript","initMap","getVenues","axios","get","URLSearchParams","client_id","client_secret","query","limit","near","v","then","response","setState","data","groups","items","catch","map","google","maps","Map","getElementById","center","lat","lng","zoom","infowindow","InfoWindow","allMarkers","forEach","venueinfo","contentString","concat","venue","name","location","address","marker","Marker","position","city","id","draggable","animation","Animation","DROP","title","addListener","pos","getZoom","setContent","open","setZoom","setCenter","getPosition","setTimeout","push","filtermyvenue","listItemClick","filter","m","onSidebarClick","sidebar","querySelector","style","transform","gm_authFailure","f","myvenue","toLowerCase","includes","setVisible","length","close","_this2","react_default","a","role","className","aria-label","tabIndex","onClick","type","autoFocus","placeholder","value","onChange","e","target","key","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","URL","process","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2RAuMeA,kBAlGb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAjGRQ,MAAQ,CACNC,OAAO,GACPC,QAAQ,GACRC,iBAAiB,GA6FDV,EApFlBW,UAAY,YAyKd,SAAoBC,GAClB,IACE,IAAIC,EAAQC,OAAOC,SAASC,qBAAqB,UAAU,GACvDC,EAASH,OAAOC,SAASG,cAAc,UAC3CD,EAAOE,IAAMP,EACbK,EAAOG,OAAQ,EACfH,EAAOI,OAAQ,EACfR,EAAMS,WAAWC,aAAaN,EAAQJ,GACrC,MAAOW,GACRC,QAAQC,IAAIF,GACbG,MAAM,gCAlLLC,CAAW,wGACXd,OAAOe,QAAU7B,EAAK6B,SAkFN7B,EA/ElB8B,UAAY,WAWVC,IAAMC,IAVM,gDAUI,IAAIC,gBATN,CACZC,UAAW,mDACXC,cAAc,mDACdC,MAAM,SACNC,MAAM,GACNC,KAAK,QACLC,EAAE,cAIHC,KAAK,SAAAC,GACJzC,EAAK0C,SAAS,CACZlC,OAAQiC,EAASE,KAAKF,SAASG,OAAO,GAAGC,OACzC7C,EAAKW,eAERmC,MAAM,SAAAtB,GACLC,QAAQC,IAAIF,MA6DExB,EAzDpB6B,QAAU,WACR,IAAIkB,EAAM,IAAIjC,OAAOkC,OAAOC,KAAKC,IAAInC,SAASoC,eAAe,OAAO,CAClEC,OAAQ,CAAEC,IAAI,QAASC,IAAI,SAC3BC,KAAK,IAGPvD,EAAK+C,IAAMA,EACX,IAAIS,EAAa,IAAI1C,OAAOkC,OAAOC,KAAKQ,WAClCC,EAAa,GAEnB1D,EAAK0C,SAAS,CACZK,IAAKA,EACLS,WAAWA,IAGbxD,EAAKO,MAAMC,OAAOmD,QAAQ,SAAAC,GACxB,IAAIC,EAAa,kDAAAC,OACFF,EAAUG,MAAMC,KADd,kCAAAF,OAEFF,EAAUG,MAAME,SAASC,QAFvB,+BAIbC,EAAS,IAAIrD,OAAOkC,OAAOC,KAAKmB,OAAO,CACzCC,SAAS,CACThB,IAAIO,EAAUG,MAAME,SAASZ,IAC7BC,IAAIM,EAAUG,MAAME,SAASX,KAE/BP,IAAKA,EACLuB,KAAMV,EAAUG,MAAME,SAASK,KAC/BJ,QAASN,EAAUG,MAAME,SAASC,QAClCN,UAAWA,EACXW,GAAIX,EAAUG,MAAMQ,GACpBP,KAAMJ,EAAUG,MAAMC,KACtBQ,WAAW,EACXC,UAAW3D,OAAOkC,OAAOC,KAAKyB,UAAUC,KACxCC,MAAOhB,EAAUG,MAAMC,OAGvBG,EAAOU,YAAY,QAAQ,WAEzB,IAAIC,EAAM/B,EAAIgC,UACdvB,EAAWwB,WAAWnB,GACtBL,EAAWyB,KAAKlC,EAAKoB,GACrBpB,EAAImC,QAAQ,IACZnC,EAAIoC,UAAUhB,EAAOiB,eACpBtE,OAAOuE,WAAW,WAAYtC,EAAImC,QAAQJ,IAAO,OAGpDpB,EAAW4B,KAAKnB,KAGlBnE,EAAK0C,SAAS,CACZjC,QAASiD,IAGX1D,EAAK0C,SAAS,CACZ6C,cAAevF,EAAKO,MAAMC,UAGVR,EAQpBwF,cAAgB,SAAChF,GAEf,IAAI2D,EAASnE,EAAKO,MAAME,QAAQgF,OAAO,SAAAC,GAAC,OAAIA,EAAEnB,KAAO/D,EAAO+D,KAAI,GAGhEvE,EAAKO,MAAMiD,WAAWwB,WAAtB,GAAAlB,OAAoCK,EAAOH,KACzC,KACFG,EAAOG,KAAO,KAAOH,EAAOD,UAG5BlE,EAAK+C,IAAIoC,UAAUhB,EAAOE,UAE1BrE,EAAKO,MAAMiD,WAAWyB,KAAKjF,EAAKO,MAAMwC,IAAKoB,IApBzBnE,EAyClB2F,eAAiB,WACf,IAAMC,EAAU7E,SAAS8E,cAAc,YACnC7F,EAAKO,MAAMG,iBACbkF,EAAQE,MAAMC,UAAY,qBAC1B/F,EAAK0C,SAAS,CAAEhC,iBAAiB,MAGjCkF,EAAQE,MAAMC,UAAY,kBAC1B/F,EAAK0C,SAAS,CAACkD,SAAS,IACxB5F,EAAK0C,SAAS,CAAEhC,iBAAiB,MAhDnCV,EAAKO,MAAQ,CACXqF,SAAQ,EACRxD,MAAM,IAJQpC,mFA1FhBc,OAAOkF,eAAiB,WACtBrE,MAAM,uCACNF,QAAQC,IAAI,wCAEdvB,KAAK2B,mEA8GKM,GACZ,IAAI6D,EAAI9F,KAAKI,MAAMC,OAAOiF,OAAO,SAAAS,GAAO,OAAIA,EAAQnC,MAAMC,KAAKmC,cAAcC,SAAShE,EAAM+D,iBAG5FhG,KAAKI,MAAME,QAAQkD,QAAQ,SAAAQ,IACqC,IAA5DA,EAAOH,KAAKmC,cAAcC,SAAShE,EAAM+D,eAC3ChC,EAAOkC,YAAW,GAClBlC,EAAOkC,YAAW,KAEH,IAAbJ,EAAEK,QAEJnG,KAAKI,MAAMiD,WAAW+C,QAExBpG,KAAKuC,SAAS,CAAC6C,cAAeU,EAAG7D,2CAiBxB,IAAAoE,EAAArG,KACP,OACEsG,EAAAC,EAAAxF,cAAA,QAAMyF,KAAK,QACXF,EAAAC,EAAAxF,cAAA,OAAK0F,UAAU,SAASC,aAAW,QACjCJ,EAAAC,EAAAxF,cAAA,UAAQ2F,aAAW,iBAAiBC,SAAS,IAAIH,KAAK,OAAOC,UAAU,sBAAsBG,QAAS5G,KAAKwF,gBACzGc,EAAAC,EAAAxF,cAAA,OAAK0F,UAAU,kBACfH,EAAAC,EAAAxF,cAAA,OAAK0F,UAAU,kBACfH,EAAAC,EAAAxF,cAAA,OAAK0F,UAAU,mBAEjBH,EAAAC,EAAAxF,cAAA,QAAM0F,UAAU,SAAQH,EAAAC,EAAAxF,cAAA,+BAExBuF,EAAAC,EAAAxF,cAAA,OAAKyF,KAAK,cAAcE,aAAW,MAAMtC,GAAG,QAE1CkC,EAAAC,EAAAxF,cAAA,OAAK2F,aAAW,UAAUF,KAAK,cAAcpC,GAAG,WAC9CkC,EAAAC,EAAAxF,cAAA,SAAO8F,KAAK,OAAOC,UAAU,YAAYH,SAAS,IAAIF,UAAU,eAAeM,YAAY,gBAAgBC,MAAOhH,KAAKI,MAAM6B,MAAOgF,SAAU,SAACC,GAAKb,EAAKjB,cAAc8B,EAAEC,OAAOH,UAChLV,EAAAC,EAAAxF,cAAA,WACAuF,EAAAC,EAAAxF,cAAA,WAEEf,KAAKI,MAAMgF,eAAiBpF,KAAKI,MAAMgF,cAAce,OAAS,GAAKnG,KAAKI,MAAMgF,cAAcxC,IAAI,SAACmD,EAASrF,GAAV,OAC5F4F,EAAAC,EAAAxF,cAAA,OAAK4F,SAAS,KAAKS,IAAK1G,EAAO+F,UAAU,cAErCH,EAAAC,EAAAxF,cAAA,UAAIuF,EAAAC,EAAAxF,cAAA,MAAIyF,KAAK,OAAOE,aAAW,SAASE,QAAS,WAAKP,EAAKhB,cAAcU,EAAQnC,SAAUmC,EAAQnC,MAAMC,mBA5K7GwD,aCQZC,EAAcC,QACW,cAA7B5G,OAAOmD,SAAS0D,UAEe,UAA7B7G,OAAOmD,SAAS0D,UAEhB7G,OAAOmD,SAAS0D,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTtF,KAAK,SAAA2F,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9H,QACfyH,UAAUC,cAAcO,YAI1B/G,QAAQC,IACN,gHAKEqG,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB1G,QAAQC,IAAI,sCAGRqG,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5BrF,MAAM,SAAAtB,GACLC,QAAQD,MAAM,4CAA6CA,KC1FjEmH,IAASC,OAAOnC,EAAAC,EAAAxF,cAAC2H,EAAD,MAAS9H,SAASoC,eAAe,SDgB1C,SAAkB4E,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIc,IAAIC,oBAAwBjI,OAAOmD,SAAS+E,MACpDC,SAAWnI,OAAOmD,SAASgF,OAIvC,OAGFnI,OAAOoI,iBAAiB,OAAQ,WAC9B,IAAMpB,EAAK,GAAAhE,OAAMiF,oBAAN,sBAEPtB,GAgEV,SAAiCK,EAAOC,GAEtCoB,MAAMrB,GACHtF,KAAK,SAAAC,GAEJ,IAAM2G,EAAc3G,EAAS4G,QAAQrH,IAAI,gBAEnB,MAApBS,EAAS6G,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvB,UAAUC,cAAcuB,MAAMhH,KAAK,SAAA2F,GACjCA,EAAasB,aAAajH,KAAK,WAC7B1B,OAAOmD,SAASyF,aAKpB7B,EAAgBC,EAAOC,KAG1BjF,MAAM,WACLrB,QAAQC,IACN,mEArFAiI,CAAwB7B,EAAOC,GAI/BC,UAAUC,cAAcuB,MAAMhH,KAAK,WACjCf,QAAQC,IACN,+GAMJmG,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.039f1725.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    venues:[],\r\n    markers:[],\r\n    hamburgerActive: false\r\n  }\r\n  componentDidMount(){\r\n    window.gm_authFailure = () => {\r\n      alert('ERROR!! \\nFailed to get Google map.')\r\n      console.log('ERROR!! \\nFailed to get Google map.')\r\n   }\r\n    this.getVenues()\r\n  }\r\n  renderMap = () => {\r\n    loadScript(\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDBuTMyBD4GlwIC2panKoa31VzgNLFkIU4&callback=initMap\")\r\n    window.initMap = this.initMap;\r\n  }\r\n\r\n  getVenues = () => {\r\n    const api = 'https://api.foursquare.com/v2/venues/explore?';\r\n    const param = {\r\n      client_id: 'LEMQI0VL0ADKRLN23NJV1LJ3JW0JYERQJBOKJ10SLOZAJH42',\r\n      client_secret:'CM5ERC0CFCTIQPHZLVH4KPRVMKFWZUQNYZ5NT0EWLGC25PE5',\r\n      query:'burger',\r\n      limit:20,\r\n      near:'India',\r\n      v:'20181311'\r\n    }\r\n\r\n    axios.get(api + new URLSearchParams(param))\r\n    .then(response => {\r\n      this.setState({\r\n        venues :response.data.response.groups[0].items\r\n      },this.renderMap())\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    })\r\n}\r\n\r\ninitMap = () => {\r\n  let map = new window.google.maps.Map(document.getElementById('map'),{\r\n    center :{ lat:20.5937, lng:78.9629},\r\n    zoom:7\r\n  });\r\n\r\n  this.map = map;\r\n  let infowindow = new window.google.maps.InfoWindow();\r\n  const allMarkers = [];\r\n\r\n  this.setState({\r\n    map: map,\r\n    infowindow:infowindow\r\n  });\r\n\r\n  this.state.venues.forEach(venueinfo => {\r\n    let contentString =`<div id=\"info\" tabindex=\"1\">\r\n        <div><h2>${venueinfo.venue.name}</h2></div>\r\n        <div><h3>${venueinfo.venue.location.address}</h3></div>\r\n        </div>`;\r\n    let marker = new window.google.maps.Marker({\r\n      position:{\r\n      lat:venueinfo.venue.location.lat,\r\n      lng:venueinfo.venue.location.lng\r\n    },\r\n    map: map,\r\n    city: venueinfo.venue.location.city,\r\n    address: venueinfo.venue.location.address,\r\n    venueinfo: venueinfo,\r\n    id: venueinfo.venue.id,\r\n    name: venueinfo.venue.name,\r\n    draggable: true,\r\n    animation: window.google.maps.Animation.DROP,\r\n    title: venueinfo.venue.name\r\n    });\r\n\r\n    marker.addListener(\"click\",function() {\r\n      // body...\r\n      let pos = map.getZoom();\r\n      infowindow.setContent(contentString);\r\n      infowindow.open(map, marker);\r\n      map.setZoom(13);\r\n      map.setCenter(marker.getPosition());\r\n       window.setTimeout(function() {map.setZoom(pos);},3000);\r\n      });\r\n\r\n    allMarkers.push(marker);\r\n  });\r\n\r\n  this.setState({\r\n    markers: allMarkers\r\n  });\r\n\r\n  this.setState({\r\n    filtermyvenue: this.state.venues\r\n  });\r\n};\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      sidebar:false,\r\n      query:\"\"\r\n    };\r\n  }\r\n\r\nlistItemClick = (venues) => {\r\n  //checking for matchiing id\r\n  let marker = this.state.markers.filter(m => m.id === venues.id)[0];\r\n\r\n//adding city and address\r\n  this.state.infowindow.setContent(`${marker.name +\r\n    \", \" +\r\n  marker.city + \", \" + marker.address}`);\r\n\r\n  //set the map positon to marker positon\r\n  this.map.setCenter(marker.position);\r\n  //open infowindow\r\n  this.state.infowindow.open(this.state.map, marker);\r\n  \r\n}\r\n\r\nfiltermyvenue(query) {\r\n  let f = this.state.venues.filter(myvenue => myvenue.venue.name.toLowerCase().includes(query.toLowerCase()))\r\n  \r\n  //show the infowindow \r\n  this.state.markers.forEach(marker => {\r\n      marker.name.toLowerCase().includes(query.toLowerCase()) === true ?\r\n    marker.setVisible(true) :\r\n    marker.setVisible(false);\r\n  });\r\n  if (f.length === 0) {\r\n    //this will close the infowindow  \r\n    this.state.infowindow.close();   \r\n  }\r\n  this.setState({filtermyvenue: f, query}); \r\n}\r\n\r\n// Toggle sidebar\r\n  onSidebarClick = () => {\r\n    const sidebar = document.querySelector('#sidebar');\r\n    if (this.state.hamburgerActive) {\r\n      sidebar.style.transform = 'translateX(-250px)'\r\n      this.setState({ hamburgerActive: false });\r\n    }\r\n    else {\r\n      sidebar.style.transform = 'translateX(0px)'\r\n      this.setState({sidebar: true});\r\n      this.setState({ hamburgerActive: true });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (  \r\n      <main role=\"main\">\r\n      <div className=\"header\" aria-label=\"name\">\r\n        <button aria-label='Hamburger Menu' tabIndex='0' role=\"menu\" className=\"hamburger-container\" onClick={this.onSidebarClick}> \r\n          <div className=\"hamburger-bar\"></div>\r\n          <div className=\"hamburger-bar\"></div>\r\n          <div className=\"hamburger-bar\"></div>\r\n        </button>\r\n        <span className=\"title\"><strong>Restaurants</strong></span></div>\r\n          \r\n        <div role=\"application\" aria-label=\"map\" id='map'></div>\r\n        \r\n          <div aria-label=\"sidebar\" role=\"search menu\" id='sidebar' >\r\n            <input type=\"text\" autoFocus=\"autofocus\" tabIndex=\"0\" className=\"SearchVenues\" placeholder=\"Search venues\" value={this.state.query} onChange={(e)=>{this.filtermyvenue(e.target.value)}}/>\r\n            <br/>\r\n            <br/>\r\n            {\r\n              this.state.filtermyvenue && this.state.filtermyvenue.length > 0 && this.state.filtermyvenue.map((myvenue, index) => (\r\n                  <div tabIndex=\"-1\" key={index} className=\"venue-item\">\r\n                      {/* <h4>{myvenue.venue.name}</h4> */}\r\n                      <ul><li role=\"link\" aria-label=\"search\" onClick={()=>{this.listItemClick(myvenue.venue)}}>{myvenue.venue.name}</li>\r\n                  </ul>\r\n                  </div>\r\n              ))\r\n            }\r\n        </div>\r\n      </main>      \r\n    )\r\n  }\r\n}\r\nfunction loadScript(source) {\r\n  try {\r\n    var index = window.document.getElementsByTagName('script')[0]\r\n    var script = window.document.createElement('script')\r\n    script.src = source\r\n    script.async = true\r\n    script.defer = true\r\n    index.parentNode.insertBefore(script, index)\r\n   } catch (error) {\r\n    console.log(error);\r\n   alert(\"Google Maps API not loading\");\r\n   }\r\n  }\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}